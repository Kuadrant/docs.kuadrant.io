name: Re-deploy via mike
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to deploy'
        required: true
        default: '0.8.0'
      sourceBranch:
        description: 'Source Branch'
        required: true
        default: '0.8'
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight UTC

jobs:
  mike-redeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetches all history for all branches and tags
          ref: ${{ github.event_name == 'schedule' && 'main' || github.event.inputs.sourceBranch }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: Install Requirements
        run: uv pip install --system -r pyproject.toml

      - name: Validate User Permissions
        id: validate_user
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Scheduled run, bypassing user permission check."
            echo "::set-output name=can_deploy::true"
          else
            USER_PERMISSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission")
            echo "User permissions: $USER_PERMISSION"
            if [[ "$USER_PERMISSION" =~ (\"permission\": \"admin\") ]]; then
              echo "User is authorized to deploy."
              echo "::set-output name=can_deploy::true"
            else
              echo "::error::User is not authorized to deploy."
              echo "::set-output name=can_deploy::false"
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git Config
        if: steps.validate_user.outputs.can_deploy == 'true'
        run: |
          git config --global user.name "Docs Deploy"
          git config --global user.email "kuadrant@googlegroups.com"

      - name: Deploy Documentation
        if: steps.validate_user.outputs.can_deploy == 'true'
        run: |
          mkdocs build -s
          mike deploy ${{ github.event_name == 'schedule' && 'dev' || github.event.inputs.version }} -t "${{ github.event_name == 'schedule' && 'dev' || github.event.inputs.version }}" --push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
